name: PR_PROD_CREATE_EC2_INSTANCE

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      retry:
        description: Retry pull request, if it failed.
        required: true
        type: boolean
      prNumber:
        description: The pull request number that failed.
        required: true
        type: number
      
permissions: 
      id-token: write
      pull-requests: write
      
jobs:
  isPrExsit:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check the pull request exists.
        id: chkPr
        if: github.event.inputs.retry
        run: |
          HTTP_STATE=$(curl -s -I -u miyamiyab:${{ secrets.GH_PAT }} \
              -H "Accept: application/vnd.github.v3+json" \
              -o /dev/null -w '%{http_code}\n' \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.inputs.prNumber }})
          if [ ${HTTP_STATE} -ne 200 ]; then
            echo "${{ github.repository }}/issues/${{ github.event.inputs.prNumber }} is not found."
            exit 1
          fi
  # 複数のディレクトリに対して効率よくテストを行うため、対象ディレクトリを抽出する。
  directories:
    runs-on: ubuntu-latest
    outputs:
      dir: ${{ steps.set-dirs.outputs.dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_PAT }}
      - id: set-dirs
        run: echo "::set-output name=dir::$(ls -d */*/ | jq -R -s -c 'split("\n")[:-1]')"

  commonTest:
    runs-on: ubuntu-latest
    needs: [ isPrExsit, directories ]
    timeout-minutes: 5
    strategy:
      matrix:
        dir: ${{fromJson(needs.directories.outputs.dir)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_PAT }}
        
      # 前回のコミットと差分がなければスキップ
      - name: Check diff
        id: diff
        uses: technote-space/get-diff-action@v4.0.2
        with:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          PATTERNS: |
            ${{ matrix.dir }}/modules/**/*.tf
            ${{ matrix.dir }}/*.tf
      
      - name: Find current pull request
        id: findPr
        if: steps.diff.outputs.diff
        uses: jwalton/gh-find-current-pr@v1
        with:
          state: all
    
      - name: Configure AWS Credentials
        if: steps.diff.outputs.diff
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: arn:aws:iam::166313796795:role/test-gha
    
      - name: Check ETag
        id: chkETag
        if: steps.diff.outputs.diff && github.event_name == 'pull_request'
        working-directory: ${{ matrix.dir }}
        run: |
          mv ./etag-tfstate.txt{,.old}
          aws s3api head-object --bucket miyashita-tfstate --key ${{ github.repository }}/${{ matrix.dir }}terraform.tfstate | jq -r .ETag > ./etag-tfstate.txt
          diff -u ./etag-tfstate.txt.old ./etag-tfstate.txt
          if [ $? -ne 0 ]; then
            echo "The ETag has changed since the last check."
            exit 1
          fi

      # 各tfstateファイルのETagを出力
      # tfstateファイルがなければ空ファイルが生成される
      - name: Store ETag of tfstate file
        id: storeETag
        if: steps.diff.outputs.diff  && github.event_name == 'push'
        working-directory: ${{ matrix.dir }}
        run: |
          aws s3api head-object --bucket miyashita-tfstate --key ${{ github.repository }}/${{ matrix.dir }}terraform.tfstate | jq -r .ETag > ./etag-tfstate.txt
          cat ./etag-tfstate.txt
      
      # ETagファイルをコミットする
      # 直前のステップで差分が生じなければエラーになるが受容しスキップする
      - name: Commit ETag of tfstate file
        id: commitETag
        if: steps.diff.outputs.diff  && github.event_name == 'push'
        working-directory: ${{ matrix.dir }}
        run: |
          git config --local user.email  ${{ github.event.pusher.email }}
          git config --local user.name  ${{ github.event.pusher.name }}
          git diff
          git add ./etag-tfstate.txt
          git commit -m "add: Store ETag of tfstate file"
          git push origin ${{ github.ref }}
        continue-on-error: true

      - name: Cache plugin dir
        if: steps.diff.outputs.diff
        uses: actions/cache@v2
        with:
          path: ~/.tflint.d/plugins
          key: ubuntu-latest-tflint-${{ hashFiles('.tflint.hcl') }}

      - name: Setup TFLint
        if: steps.diff.outputs.diff
        uses: terraform-linters/setup-tflint@v1

      - name: Show version
        if: steps.diff.outputs.diff
        working-directory: ${{ matrix.dir }}
        run: tflint --version --config=../../common-tflint.hcl

      - name: Init TFLint
        if: steps.diff.outputs.diff
        working-directory: ${{ matrix.dir }}
        run: tflint --init --config=../../common-tflint.hcl

      - name: Run TFLint
        id: runTFLint
        if: steps.diff.outputs.diff
        working-directory: ${{ matrix.dir }}
        run: tflint -f compact --config=../../common-tflint.hcl

      - name: Comment to pull request(TFLint)
        id: commentPrTFLint
        if: steps.diff.outputs.diff && failure() && steps.fail_step.outcome == 'failure' && ( steps.findPr.outputs.pr || github.event.inputs.prNumber )
        uses: actions/github-script@v6
        env:
          PR_NUM: ${{ steps.findPr.outputs.pr }}
          PR_NUM_INPUT: ${{ github.event.inputs.prNumber }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `${{ steps.runTFLint.outputs.stdout }}`;
            
            let prNumber;
            if (!isNaN(parseInt(process.env.PR_NUM))) {
              prNumber = process.env.PR_NUM;
            } else if (!isNaN(parseInt(process.env.PR_NUM_INPUT))) {
              prNumber = process.env.PR_NUM_INPUT;
            }
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # 常に最新版を使う
      - name: Setup terraform
        if: steps.diff.outputs.diff
        uses: hashicorp/setup-terraform@v1
      
      # フォーマットが正しくなければ失敗させる
      - name: Terraform fmt
        id: fmt
        if: steps.diff.outputs.diff
        working-directory: ${{ matrix.dir }}
        run: terraform fmt -check
      
      # 初期化
      # バックエンドは重複しないように動的に設定する
      - name: Terraform Init
        id: init
        if: steps.diff.outputs.diff
        working-directory: ${{ matrix.dir }}
        run: terraform init -backend-config="key=${{ github.repository }}/${{ matrix.dir }}/terraform.tfstate"
      
      - name: Terraform Validate
        id: validate
        if: steps.diff.outputs.diff
        working-directory: ${{ matrix.dir }}
        run: terraform validate -no-color
      
      # プルリク作成段階でのplanでは想定外の発生は許容せず失敗させる
      - name: Terraform Plan
        id: plan
        if: steps.diff.outputs.diff
        working-directory: ${{ matrix.dir }}
        run: terraform plan -no-color

      - name: Comment to pull request(PLAN)
        id: commentPrPlan
        if: steps.diff.outputs.diff && ( steps.findPr.outputs.pr || github.event.inputs.prNumber )
        uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          PR_NUM: ${{ steps.findPr.outputs.pr }}
          PR_NUM_INPUT: ${{ github.event.inputs.prNumber }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ matrix.dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            let prNumber;
            if (!isNaN(parseInt(process.env.PR_NUM))) {
              prNumber = process.env.PR_NUM;
            } else if (!isNaN(parseInt(process.env.PR_NUM_INPUT))) {
              prNumber = process.env.PR_NUM_INPUT;
            }
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.0.2
        if: steps.diff.outputs.diff
        with:
          github_token: ${{ secrets.GH_PAT }}
          working_directory: ${{ matrix.dir }}
      
      - name: send
        env:
          CHATWORK_API_KEY: ${{ secrets.CHATWORK_API_KEY }}
        run: |
          export PR_NUMBER=$(echo $GITHUB_REF | sed -e 's/[^0-9]//g')
          export PR_URL="https://github.com/${{ github.repository }}/pull/${PR_NUMBER}"
          echo "[To:4367250]本人" > /tmp/tmp.txt
          echo "プルリクエストが追加されました。内容を確認と対応をお願いいたします。" >> /tmp/tmp.txt
          echo "$PR_URL" >> /tmp/tmp.txt
          curl -X POST -H "X-ChatWorkToken: $CHATWORK_API_KEY" "https://api.chatwork.com/v2/rooms/171332204/messages" -d "body=$(cat /tmp/tmp.txt)"
